generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuildSettings {
  guildId          String  @id
  modmailChannelId String?
  greetingMessage  String?
  farewellMessage  String?
}

model SnippetUpdates {
  snippetUpdateId Int      @id @default(autoincrement())
  snippetId       Int
  snippet         Snippet  @relation(fields: [snippetId], references: [snippetId], onDelete: Cascade)
  updatedAt       DateTime @default(now())
  updatedBy       String
  oldContent      String
}

model Snippet {
  snippetId     Int              @id @default(autoincrement())
  guildId       String
  createdById   String
  name          String
  content       String
  timesUsed     Int              @default(0)
  lastUsedAt    DateTime?        @db.Timestamptz()
  createdAt     DateTime         @default(now()) @db.Timestamptz()
  lastUpdatedAt DateTime         @updatedAt @db.Timestamptz()
  updates       SnippetUpdates[]

  @@unique([guildId, name])
}

model ScheduledThreadClose {
  threadId      Int      @id
  thread        Thread   @relation(fields: [threadId], references: [threadId], onDelete: Cascade)
  scheduledById String
  silent        Boolean  @default(false)
  closeAt       DateTime
}

model ThreadMessage {
  threadMessageId Int     @id @default(autoincrement())
  guildId         String
  threadId        Int
  thread          Thread  @relation(fields: [threadId], references: [threadId], onDelete: Cascade)
  userId          String
  userMessageId   String
  staffId         String?
  guildMessageId  String
}

model Thread {
  threadId       Int                   @id @default(autoincrement())
  guildId        String
  channelId      String
  userId         String
  createdById    String
  createdAt      DateTime              @default(now()) @db.Timestamptz()
  closedById     String?
  closedAt       DateTime?             @db.Timestamptz()
  scheduledClose ScheduledThreadClose?
  messages       ThreadMessage[]
}
